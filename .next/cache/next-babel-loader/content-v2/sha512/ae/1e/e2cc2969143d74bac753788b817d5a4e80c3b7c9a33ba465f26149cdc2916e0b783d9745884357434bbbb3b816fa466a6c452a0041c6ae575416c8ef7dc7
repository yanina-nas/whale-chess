{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/folly/dev/match_game/match_game/pages/Animal.tsx\";\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { ItemTypes } from './Constants';\nimport { useDrag } from 'react-dnd';\n\nconst Animal = () => {\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ItemTypes.ANIMAL\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    draggable: true,\n    className: 'box',\n    ref: drag,\n    style: {\n      opacity: isDragging ? 0.5 : 1,\n      cursor: 'move'\n    },\n    children: /*#__PURE__*/_jsxDEV(StyledIcon, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: '/whale.svg'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Animal;\nconst StyledIcon = styled.div`\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    svg {\n        width: ${props => props.width}px;\n        height: ${props => props.height}px;\n        fill: ${props => props.color};\n        path {\n            stroke: ${props => props.color};;\n        }\n    }\n`;","map":{"version":3,"sources":["/Users/folly/dev/match_game/match_game/pages/Animal.tsx"],"names":["styled","React","ItemTypes","useDrag","Animal","isDragging","drag","item","type","ANIMAL","collect","monitor","opacity","cursor","StyledIcon","div","props","width","height","color"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAyC,OAAzC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAQA,MAAMC,MAAsC,GAAG,MAAM;AAEjD,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyBH,OAAO,CAAC;AACnCI,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAEN,SAAS,CAACO;AAAlB,KAD6B;AAEnCC,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACrBN,MAAAA,UAAU,EAAE,CAAC,CAACM,OAAO,CAACN,UAAR;AADO,KAAd;AAF0B,GAAD,CAAtC;AAOA,sBACI;AAAK,IAAA,SAAS,MAAd;AACI,IAAA,SAAS,EAAE,KADf;AAEI,IAAA,GAAG,EAAEC,IAFT;AAGI,IAAA,KAAK,EAAE;AACHM,MAAAA,OAAO,EAAEP,UAAU,GAAG,GAAH,GAAS,CADzB;AAEHQ,MAAAA,MAAM,EAAE;AAFL,KAHX;AAAA,2BAOI,QAAC,UAAD;AAAA,6BACI;AAAK,QAAA,GAAG,EAAE;AAAV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAtBD;;AAwBA,eAAeT,MAAf;AASA,MAAMU,UAAU,GAAGd,MAAM,CAACe,GAAW;AACrC,aAAaC,KAAK,IAAIA,KAAK,CAACC,KAAM;AAClC,cAAcD,KAAK,IAAIA,KAAK,CAACE,MAAO;AACpC;AACA,iBAAiBF,KAAK,IAAIA,KAAK,CAACC,KAAM;AACtC,kBAAkBD,KAAK,IAAIA,KAAK,CAACE,MAAO;AACxC,gBAAgBF,KAAK,IAAIA,KAAK,CAACG,KAAM;AACrC;AACA,sBAAsBH,KAAK,IAAIA,KAAK,CAACG,KAAM;AAC3C;AACA;AACA,CAXA","sourcesContent":["import styled from '@emotion/styled';\nimport React, { FunctionComponent } from 'react';\nimport { ItemTypes } from './Constants'\nimport { useDrag } from 'react-dnd'\n\ninterface AnimalProps{\n    isSorted?: boolean;\n}\n\n\n\nconst Animal: FunctionComponent<AnimalProps> = () => {\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.ANIMAL },\n        collect: (monitor) => ({\n          isDragging: !!monitor.isDragging()\n        })\n    });\n\n    return (\n        <div draggable\n            className={'box'}\n            ref={drag} \n            style={{\n                opacity: isDragging ? 0.5 : 1,\n                cursor: 'move',\n            }}>\n            <StyledIcon>\n                <img src={'/whale.svg'}/>\n            </StyledIcon>\n        </div>\n    )\n}\n\nexport default Animal;\n\ninterface Props {\n    isFullWidth?: boolean;\n    height?: number;\n    width?: number;\n    color?: string;\n}\n  \nconst StyledIcon = styled.div<Props>`\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    svg {\n        width: ${props => props.width}px;\n        height: ${props => props.height}px;\n        fill: ${props => props.color};\n        path {\n            stroke: ${props => props.color};;\n        }\n    }\n`;"]},"metadata":{},"sourceType":"module"}